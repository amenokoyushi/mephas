shinyApp(ui = ui, server = server)
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_server.R", local=TRUE)
shinyApp(ui = ui, server = server)
}
mfs_nptest()
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_server.R", local=TRUE)
shinyApp(ui = ui, server = server)
}
mfs_nptest()
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_server.R", local=TRUE)
shinyApp(ui = ui, server = server)
}
mfs_nptest()
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_server.R", local=TRUE)
shinyApp(ui = ui, server = server)
}
mfs_nptest()
shiny::runApp('~/Documents/biostatshiny/crotb_en')
##------------------------------------------------------------------------------------##
##
##  Packages in the app
##
if (!require(shiny)) {install.packages("shiny")}; library(shiny)
#if (!require(shinythemes)) {install.packages("shinythemes")}; library(shinythemes)
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
#if (!require(ggthemes)) {install.packages("ggthemes")}; library(ggthemes)
#if (!require(Hmisc)) {install.packages("Hmisc")}; library(Hmisc)
if (!require(gridExtra)) {install.packages("gridExtra")}; library(gridExtra)
if (!require(reshape)) {install.packages("reshape")}; library(reshape)
#if (!require(DT)) {install.packages("DT")}; library(DT)
if (!require(pastecs)) {install.packages("pastecs")}; library(pastecs)
##
##------------------------------------------------------------------------------------##
##' This is the description of this function
##'
##' This is the details of this function
##' @title T tests on one-sample and two samples
##' @return The shiny web page of T test for one sample and two samples
##' @import shiny
##' @import ggplot2
##' @importFrom gridExtra grid.arrange
##' @importFrom reshape melt
##' @importFrom pastecs stat.desc
##' @examples
##' mfs_ttest()
##' @export
mfs_ttest <- function(){
source("ttest_ui.R", local = TRUE)
source("ttest_sv.R", local = TRUE)
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
}
mfs_ttest()
##------------------------------------------------------------------------------------##
##
##  Packages in the app
##
if (!require(shiny)) {install.packages("shiny")}; library(shiny)
#if (!require(shinythemes)) {install.packages("shinythemes")}; library(shinythemes)
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
#if (!require(ggthemes)) {install.packages("ggthemes")}; library(ggthemes)
if (!require(Hmisc)) {install.packages("Hmisc")}; library(Hmisc)
if (!require(gridExtra)) {install.packages("gridExtra")}; library(gridExtra)
if (!require(reshape)) {install.packages("reshape")}; library(reshape)
#if (!require(DT)) {install.packages("DT")}; library(DT)
#if (!require(psych)) {install.packages("psych")}; library(psych)
##
##------------------------------------------------------------------------------------##
##' This is the description of this function, 3
##'
##' This is the details of this function, 3
##' @title Tests based on binomial proportional data
##' @return The shiny web page of the tests based on binominal proportion
##' @import shiny
##' @import ggplot2
##' @importFrom gridExtra grid.arrange
##' @importFrom reshape melt
##' @importFrom pastecs stat.desc
##' @examples
##' mfs_btest()
##' @export
mfs_btest <- function(){
source("btest_ui.R", local = TRUE)
source("btest_sv.R", local = TRUE)
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
}
mfs_btest()
##------------------------------------------------------------------------------------##
##
##  Packages in the app
##
if (!require(shiny)) {install.packages("shiny")}; library(shiny)
#if (!require(shinythemes)) {install.packages("shinythemes")}; library(shinythemes)
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
#if (!require(ggthemes)) {install.packages("ggthemes")}; library(ggthemes)
#if (!require(Hmisc)) {install.packages("Hmisc")}; library(Hmisc)
if (!require(gridExtra)) {install.packages("gridExtra")}; library(gridExtra)
if (!require(reshape)) {install.packages("reshape")}; library(reshape)
#if (!require(DT)) {install.packages("DT")}; library(DT)
if (!require(DescTools)) {install.packages("DescTools")}; library(DescTools)
if (!require(RVAideMemoire)) {install.packages("RVAideMemoire")}; library(RVAideMemoire)
if (!require(pastecs)) {install.packages("pastecs")}; library(pastecs)
##
##------------------------------------------------------------------------------------##
##' This is the description of this function
##'
##' This is the details of this function
##' @title Non-paramatric tests
##' @return The shiny web page of non-parametric statistical test
##' @import shiny
##' @import ggplot2
##' @importFrom gridExtra grid.arrange
##' @importFrom reshape melt
##' @importFrom pastecs stat.desc
##' @importFrom DescTools SignTest
##' @importFrom RVAideMemoire mood.medtest
##' @examples
##' mfs_nptest()
##' @export
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_sv.R", local=TRUE)
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser=TRUE)
}
mfs_nptest()
##------------------------------------------------------------------------------------##
##
##  Packages in the app
##
if (!require(shiny)) {install.packages("shiny")}; library(shiny)
#if (!require(shinythemes)) {install.packages("shinythemes")}; library(shinythemes)
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
#if (!require(ggthemes)) {install.packages("ggthemes")}; library(ggthemes)
#if (!require(Hmisc)) {install.packages("Hmisc")}; library(Hmisc)
if (!require(gridExtra)) {install.packages("gridExtra")}; library(gridExtra)
if (!require(reshape)) {install.packages("reshape")}; library(reshape)
#if (!require(DT)) {install.packages("DT")}; library(DT)
if (!require(DescTools)) {install.packages("DescTools")}; library(DescTools)
if (!require(RVAideMemoire)) {install.packages("RVAideMemoire")}; library(RVAideMemoire)
if (!require(pastecs)) {install.packages("pastecs")}; library(pastecs)
##
##------------------------------------------------------------------------------------##
##' This is the description of this function
##'
##' This is the details of this function
##' @title Non-paramatric tests
##' @return The shiny web page of non-parametric statistical test
##' @import shiny
##' @import ggplot2
##' @importFrom gridExtra grid.arrange
##' @importFrom reshape melt
##' @importFrom pastecs stat.desc
##' @importFrom DescTools SignTest
##' @importFrom RVAideMemoire mood.medtest
##' @examples
##' mfs_nptest()
##' @export
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_sv.R", local=TRUE)
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser=TRUE)
}
mfs_nptest()
##------------------------------------------------------------------------------------##
##
##  Packages in the app
##
if (!require(shiny)) {install.packages("shiny")}; library(shiny)
#if (!require(shinythemes)) {install.packages("shinythemes")}; library(shinythemes)
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
#if (!require(ggthemes)) {install.packages("ggthemes")}; library(ggthemes)
#if (!require(Hmisc)) {install.packages("Hmisc")}; library(Hmisc)
if (!require(gridExtra)) {install.packages("gridExtra")}; library(gridExtra)
if (!require(reshape)) {install.packages("reshape")}; library(reshape)
#if (!require(DT)) {install.packages("DT")}; library(DT)
if (!require(DescTools)) {install.packages("DescTools")}; library(DescTools)
if (!require(RVAideMemoire)) {install.packages("RVAideMemoire")}; library(RVAideMemoire)
if (!require(pastecs)) {install.packages("pastecs")}; library(pastecs)
##
##------------------------------------------------------------------------------------##
##' This is the description of this function
##'
##' This is the details of this function
##' @title Non-paramatric tests
##' @return The shiny web page of non-parametric statistical test
##' @import shiny
##' @import ggplot2
##' @importFrom gridExtra grid.arrange
##' @importFrom reshape melt
##' @importFrom pastecs stat.desc
##' @importFrom DescTools SignTest
##' @importFrom RVAideMemoire mood.medtest
##' @examples
##' mfs_nptest()
##' @export
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_sv.R", local=TRUE)
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser=TRUE)
}
mfs_nptest()
##------------------------------------------------------------------------------------##
##
##  Packages in the app
##
if (!require(shiny)) {install.packages("shiny")}; library(shiny)
#if (!require(shinythemes)) {install.packages("shinythemes")}; library(shinythemes)
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
#if (!require(ggthemes)) {install.packages("ggthemes")}; library(ggthemes)
#if (!require(Hmisc)) {install.packages("Hmisc")}; library(Hmisc)
if (!require(gridExtra)) {install.packages("gridExtra")}; library(gridExtra)
if (!require(reshape)) {install.packages("reshape")}; library(reshape)
#if (!require(DT)) {install.packages("DT")}; library(DT)
if (!require(DescTools)) {install.packages("DescTools")}; library(DescTools)
if (!require(RVAideMemoire)) {install.packages("RVAideMemoire")}; library(RVAideMemoire)
if (!require(pastecs)) {install.packages("pastecs")}; library(pastecs)
##
##------------------------------------------------------------------------------------##
##' This is the description of this function
##'
##' This is the details of this function
##' @title Non-paramatric tests
##' @return The shiny web page of non-parametric statistical test
##' @import shiny
##' @import ggplot2
##' @importFrom gridExtra grid.arrange
##' @importFrom reshape melt
##' @importFrom pastecs stat.desc
##' @importFrom DescTools SignTest
##' @importFrom RVAideMemoire mood.medtest
##' @examples
##' mfs_nptest()
##' @export
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_sv.R", local=TRUE)
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser=TRUE)
}
mfs_nptest()
##------------------------------------------------------------------------------------##
##
##  Packages in the app
##
if (!require(shiny)) {install.packages("shiny")}; library(shiny)
#if (!require(shinythemes)) {install.packages("shinythemes")}; library(shinythemes)
if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
#if (!require(ggthemes)) {install.packages("ggthemes")}; library(ggthemes)
#if (!require(Hmisc)) {install.packages("Hmisc")}; library(Hmisc)
if (!require(gridExtra)) {install.packages("gridExtra")}; library(gridExtra)
if (!require(reshape)) {install.packages("reshape")}; library(reshape)
#if (!require(DT)) {install.packages("DT")}; library(DT)
if (!require(DescTools)) {install.packages("DescTools")}; library(DescTools)
if (!require(RVAideMemoire)) {install.packages("RVAideMemoire")}; library(RVAideMemoire)
if (!require(pastecs)) {install.packages("pastecs")}; library(pastecs)
##
##------------------------------------------------------------------------------------##
##' This is the description of this function
##'
##' This is the details of this function
##' @title Non-paramatric tests
##' @return The shiny web page of non-parametric statistical test
##' @import shiny
##' @import ggplot2
##' @importFrom gridExtra grid.arrange
##' @importFrom reshape melt
##' @importFrom pastecs stat.desc
##' @importFrom DescTools SignTest
##' @importFrom RVAideMemoire mood.medtest
##' @examples
##' mfs_nptest()
##' @export
mfs_nptest <- function(){
source("nptest_ui.R", local=TRUE)
source("nptest_sv.R", local=TRUE)
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser=TRUE)
}
mfs_nptest()
